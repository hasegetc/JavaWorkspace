<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx
     	   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     	   http://www.springframework.org/schema/jdbc 
     	   http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	<!-- 采用注解的方式配置bean -->
	<context:annotation-config />
	<!-- 配置要扫描的包 -->
	<context:component-scan base-package="com.sinaapp.sanrenxing"></context:component-scan>
	<!-- 配置数据源属性文件 -->
	<bean id="propertyPlaceholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/db.properties</value>
			</list>
		</property>
	</bean>
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${database.driver}"/>
		<property name="url" value="${database.url}"/>
		<property name="username" value="${database.username}"/>
		<property name="password" value="${database.password}"/>
		<!-- 队列中的最小等待数 -->
		<property name="minIdle" value="${database.minIdle}"/>
		<!-- 队列中的最大等待数 -->
		<property name="maxIdle" value="${database.maxIdle}"/>
		<!-- 最长等待时间，单位毫秒 -->
		<property name="maxWait" value="${database.maxWait}"/>
		<!-- 最大活跃数 -->
		<property name="maxActive" value="${database.maxActive}"/>
		<!-- 初始化个数 -->
		<property name="initialSize" value="${database.initialSize}"/>
	</bean>
	
	<!-- 配置mybatis的SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="/WEB-INF/mybatis.xml"></property>
	</bean>
	<!-- 配置mybatis数据处理的方式，共四种方式，这里采用MapperScannerConfigurer方式 -->
	<!-- 
		SqlSessionTemplate  这个需要写配置文件，在实现类中注入sqlsession，再使用sqlsession,是细颗粒控制
		SqlSessionDaoSupport   这个只需要在实现类中继承特殊类就可以使用sqlsession
		MapperFactoryBean  这个要写配置文件，把对应的所有接口在配置文件中引用即可，无需写实现类
		MapperScannerConfigurer  这个要写配置文件，只要给出接口所在的包即可，会自动把包中的接口引入，无需写实现类
	 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sinaapp.sanrenxing.dao"/>
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- jdbc初始化数据库 -->
	<jdbc:initialize-database data-source="dataSource" ignore-failures="NONE" enabled="${jdbc.initializedatabase}">
		<jdbc:script encoding="utf-8" location="/WEB-INF/db-init.sql"/>
	</jdbc:initialize-database>
	
	<!-- 加载其他spring配置文件 -->
	<import resource="/spring-conf/bluemoonBeans.xml"/>
	
</beans>