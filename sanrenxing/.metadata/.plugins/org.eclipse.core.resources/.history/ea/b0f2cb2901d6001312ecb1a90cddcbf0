package com.sinaapp.sanrenxing.action;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.apache.struts2.interceptor.ServletResponseAware;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.opensymphony.xwork2.ActionSupport;
import com.qq.weixin.sdk.message.receive.ReceivedMessage;
import com.sinaapp.sanrenxing.consts.ISanrenxingConsts;
import com.sinaapp.sanrenxing.job.BlueMoonJob;
import com.sinaapp.sanrenxing.job.SanrenxingJob;
import com.sinaapp.sanrenxing.util.MessageUtil;
import com.sinaapp.sanrenxing.util.SignatureUtil;

@Component
@Scope("prototype")
public class SanrenxingAction extends ActionSupport implements
		ServletResponseAware, ServletRequestAware {
	private static final long serialVersionUID = -3617424650852024180L;

	private HttpServletResponse response;
	private HttpServletRequest request;

	ReceivedMessage receivedMessage;
	SanrenxingJob job = new SanrenxingJob();
	BlueMoonJob blueMoonJob = new BlueMoonJob();
	private Logger logger = Logger.getLogger(SanrenxingAction.class);

	@Override
	public void setServletResponse(HttpServletResponse response) {
		this.response = response;
	}

	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request = request;

	}

	@Override
	public String execute() throws Exception {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		String echostr = request.getParameter("echostr");
		String signature = request.getParameter("signature");
		String nonce = request.getParameter("nonce");
		String timestamp = request.getParameter("timestamp");
		boolean isSanrenxing = SignatureUtil.checkSignature(signature, timestamp,
				nonce, ISanrenxingConsts.APP_Token);
		boolean isSanrenxingService = SignatureUtil.checkSignature(signature,
				timestamp, nonce, ISanrenxingConsts.SERVICE_APP_TOKEN);
		boolean isBluemoon = SignatureUtil.checkSignature(signature, timestamp,
				nonce, ISanrenxingConsts.BLUEMOON_APP_TOKEN);
		boolean isBluemoon = SignatureUtil.checkSignature(signature, timestamp,
				nonce, ISanrenxingConsts.XX_APP_TOKEN);

		if (signature != null
				&& (isSanrenxing || isSanrenxingService || isBluemoon)) {
			// message when get! when post, echostr is null or

			if (echostr != null) {
				handleGetRequest(echostr);
			} else {
				handlePostRequest(isBluemoon);
			}
		} else {

			try {
				request.getRequestDispatcher("index.jsp").forward(request,
						response);
			} catch (ServletException e) {
				e.printStackTrace();
			}
		}

		return NONE;
	}

	private void handlePostRequest(boolean isBluemoon) throws IOException {

		receivedMessage = getMessage();

		if (receivedMessage == null) {
			return;
		}
		PrintWriter out = response.getWriter();
		// do post
		response.setContentType("text/xml;charset=UTF-8");
		// response.setCharacterEncoding("UTF-8");
		String response = null;
		if (isBluemoon) {
			response = blueMoonJob.handleJob(receivedMessage);
			out.write(response);
			out.flush();
			out.close();
		} else {
			job.handleJob(receivedMessage);
		}
	}

	private void handleGetRequest(String echostr) throws IOException {
		PrintWriter out = response.getWriter();
		response.setContentType("text/plain");
		out.write(echostr);
		out.flush();
		out.close();
		out = null;
	}

	private ReceivedMessage getMessage() {
		SAXReader saxReadr = new SAXReader();// 得到SAXReader对象
		org.dom4j.Document document = null;
		try {
			document = saxReadr.read(request.getInputStream());
		} catch (Exception e) {
			logger.error(e);
		}
		Element root = document.getRootElement();// 得到根节点
		if (root == null) {
			logger.error("root is null");
			return null;
		}
		return MessageUtil.getMessage(root);
	}
}
